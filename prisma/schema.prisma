generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                       String  @id @default(cuid())
  userId                   Int
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? // @db.Text
  access_token             String? // @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? // @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Restrict)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

model User {
  id            Int       @id @default(autoincrement())
  fullName      String
  phone         String    @unique
  role          Role      @default(CUSTOMER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  address       String?
  latitude      Float?
  longitude     Float?
  passwordHash  String?
  language      Lang      @default(RU)
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  orders        Order[]
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Category {
  id            Int        @id @default(autoincrement())
  name          String     @unique
  parentId      Int?
  parent        Category?  @relation("SubCategories", fields: [parentId], references: [id])
  subCategories Category[] @relation("SubCategories")
  products      Product[]
}

model Product {
  id          Int         @id @default(autoincrement())
  name        String      @unique
  description String?
  price       Int
  imageUrl    String?
  categoryId  Int?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  OrderItem   OrderItem[]
  category    Category?   @relation(fields: [categoryId], references: [id], onDelete: Restrict)
}

model Order {
  id         Int          @id @default(autoincrement())
  userId     Int
  status     OrderStatus  @default(PENDING)
  total      Int
  delivery   DeliveryType
  deliveryAt DateTime
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  user       User         @relation(fields: [userId], references: [id])
  items      OrderItem[]
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}

enum Role {
  CUSTOMER
  ADMIN
}

enum Lang {
  RU
  UZ
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  DELIVERED
  CANCELED
}

enum DeliveryType {
  DELIVERY
  PICKUP
}
